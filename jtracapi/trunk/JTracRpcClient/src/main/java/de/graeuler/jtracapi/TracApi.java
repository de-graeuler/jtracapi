package de.graeuler.jtracapi;

import java.net.MalformedURLException;
import java.net.URL;

import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
import org.apache.xmlrpc.client.util.ClientFactory;
import org.apache.xmlrpc.common.TypeConverter;
import org.apache.xmlrpc.common.TypeConverterFactoryImpl;

import de.graeuler.jtracapi.converter.SearchFilterListTypeConverter;
import de.graeuler.jtracapi.converter.SearchResultListTypeConverter;
import de.graeuler.jtracapi.converter.TicketActionListTypeConverter;
import de.graeuler.jtracapi.converter.TicketComponentFieldTypeConverter;
import de.graeuler.jtracapi.converter.TicketFieldListTypeConverter;
import de.graeuler.jtracapi.converter.TicketMilestoneFieldTypeConverter;
import de.graeuler.jtracapi.converter.TicketTypeConverter;
import de.graeuler.jtracapi.model.field.TicketComponentField;
import de.graeuler.jtracapi.model.field.TicketMilestoneField;
import de.graeuler.jtracapi.model.field.TicketVersionField;
import de.graeuler.jtracapi.model.search.SearchFilterList;
import de.graeuler.jtracapi.model.search.SearchResultList;
import de.graeuler.jtracapi.model.ticket.Ticket;
import de.graeuler.jtracapi.model.ticket.TicketActionList;
import de.graeuler.jtracapi.model.ticket.TicketFieldList;
import de.graeuler.jtracapi.xmlrpc.TracInterface;
import de.graeuler.jtracapi.xmlrpc.search.TracSearch;
import de.graeuler.jtracapi.xmlrpc.system.TracSystem;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicket;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketComponent;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketMilestone;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketPriority;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketResolution;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketSeverity;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketStatus;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketType;
import de.graeuler.jtracapi.xmlrpc.ticket.TracTicketVersion;
import de.graeuler.jtracapi.xmlrpc.wiki.TracWiki;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'bernhard.graeuler' at '10.06.15 10:10' with Gradle 2.4
 *
 * @author bernhard.graeuler, @date 10.06.15 10:10
 */
public class TracApi {
	XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();

	public TracApi(URL serviceUrl) throws MalformedURLException {
		config.setServerURL(serviceUrl);
	}

	public void setBasicAuthentication(String username, String password) {
		config.setBasicUserName(username);
		config.setBasicPassword(password);
	}

	public TracSystem getSystemApi() {
		TracSystem system = (TracSystem) buildXmlRpcAccessObject(
				TracSystem.class, "system");
		return system;
	}

	public TracSearch getSearchApi() {
		TracSearch search = (TracSearch) buildXmlRpcAccessObject(
				TracSearch.class, "search");
		return search;
	}

	public TracTicket getTicketApi() {
		TracTicket ticket = (TracTicket) buildXmlRpcAccessObject(
				TracTicket.class, "ticket");
		return ticket;
	}

	public TracTicketComponent getTicketComponentApi() {
		TracTicketComponent component = (TracTicketComponent) buildXmlRpcAccessObject(
				TracTicketComponent.class, "ticket.component");
		return component;
	}

	public TracTicketMilestone getTicketMilestoneApi() {
		TracTicketMilestone milestone = (TracTicketMilestone) buildXmlRpcAccessObject(
				TracTicketMilestone.class, "ticket.milestone");
		return milestone;
	}

	public TracTicketPriority getTicketPriorityApi() {
		TracTicketPriority priority = (TracTicketPriority) buildXmlRpcAccessObject(
				TracTicketPriority.class, "ticket.priority");
		return priority;
	}

	public TracTicketResolution getTicketResolutionApi() {
		TracTicketResolution resolution = (TracTicketResolution) buildXmlRpcAccessObject(
				TracTicketResolution.class, "ticket.resolution");
		return resolution;
	}

	public TracTicketSeverity getTicketSeverityApi() {
		TracTicketSeverity severity = (TracTicketSeverity) buildXmlRpcAccessObject(
				TracTicketSeverity.class, "ticket.severity");
		return severity;
	}

	public TracTicketStatus getTicketStatusApi() {
		TracTicketStatus status = (TracTicketStatus) buildXmlRpcAccessObject(
				TracTicketStatus.class, "ticket.status");
		return status;
	}

	public TracTicketType getTicketTypeApi() {
		TracTicketType type = (TracTicketType) buildXmlRpcAccessObject(
				TracTicketType.class, "ticket.type");
		return type;
	}

	public TracTicketVersion getTicketVersionApi() {
		TracTicketVersion version = (TracTicketVersion) buildXmlRpcAccessObject(
				TracTicketVersion.class, "ticket.version");
		return version;
	}

	public TracWiki getWikiApi() {
		TracWiki wiki = (TracWiki) buildXmlRpcAccessObject(TracWiki.class,
				"wiki");
		return wiki;
	}

	protected ClientFactory getClientFactory() {
		XmlRpcClient client = new XmlRpcClient();

		// This is how you would use Apache Commons http client (v3.1) for
		// digest authentication
		// sadly, with tracd and Digest Authentication this causes an
		// org.apache.commons.httpclient.ProtocolException: The server
		// 192.168.1.90 failed to respond with a valid HTTP response
		// As Digest Authentication works with other HTTP Clients (cURL and
		// Firefox tested), I think it is a bug in the commons httpclient.
		//
		// XmlRpcCommonsTransportFactory tf = new
		// XmlRpcCommonsTransportFactory(client);
		// HttpClient httpClient = new HttpClient();
		// AuthScope authScope = new AuthScope(AuthScope.ANY_HOST, 80,
		// "java-debian.de");
		// httpClient.getState().setCredentials(authScope, new
		// UsernamePasswordCredentials("admin", "admin"));
		// tf.setHttpClient(httpClient);
		// client.setTransportFactory(tf);

		client.setConfig(config);
		ClientFactory factory = new ClientFactory(client,
				new TypeConverterFactoryImpl() {

					@Override
					public TypeConverter getTypeConverter(
							@SuppressWarnings("rawtypes") Class pClass) {

						if (SearchFilterList.class.equals(pClass))
							return new SearchFilterListTypeConverter();

						if (SearchResultList.class.equals(pClass))
							return new SearchResultListTypeConverter();

						if (Ticket.class.equals(pClass))
							return new TicketTypeConverter();

						if (TicketActionList.class.equals(pClass))
							return new TicketActionListTypeConverter();

						if (TicketFieldList.class.equals(pClass))
							return new TicketFieldListTypeConverter();

						if (TicketComponentField.class.equals(pClass))
							return new TicketComponentFieldTypeConverter();

						if (TicketMilestoneField.class.equals(pClass))
							return new TicketMilestoneFieldTypeConverter();
						
						if (TicketVersionField.class.equals(pClass))
							return new TicketVersionFieldTypeConverter();

						return super.getTypeConverter(pClass);

					}

				});
		return factory;
	}

	protected Object buildXmlRpcAccessObject(
			Class<? extends TracInterface> pClass, String pRemoteName) {
		ClientFactory factory = getClientFactory();
		Object object = factory.newInstance(Thread.currentThread()
				.getContextClassLoader(), pClass, pRemoteName);
		return object;
	}

}
